name: Site Monitor Pro CI/CD

on:
  push:
    branches: [main, develop]
    tags:
      - "v*"
  pull_request:
    branches: [main, develop]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_REGISTRY: docker.io

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          cd backend
          PYTHONPATH=$PYTHONPATH:$(pwd) pytest

      - name: Generate test coverage report
        run: |
          cd backend
          pip install pytest-cov
          PYTHONPATH=$PYTHONPATH:$(pwd) pytest --cov=app --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          file: ./backend/coverage.xml
          fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install security scanning tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Scan Python dependencies for vulnerabilities
        run: |
          cd backend
          safety check -r requirements.txt || true

      - name: Run SAST with Bandit
        run: |
          cd backend
          bandit -r app/ -f json -o bandit-results.json || true

      - name: Upload Bandit scan results
        uses: actions/upload-artifact@v2
        with:
          name: bandit-results
          path: backend/bandit-results.json

      - name: Container vulnerability scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "docker.io/library/python:3.9-slim"
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

  build-and-push:
    needs: [test-backend, security-scan]
    runs-on: ubuntu-latest
    if: success() && (github.event_name == 'push' || github.event_name == 'tag')
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/site-monitor-app
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/site-monitor-app:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/site-monitor-app:buildcache,mode=max

  deploy-to-render:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to Render
        uses: JorgeLNJunior/render-deploy@v1.3.2
        with:
          service_id: ${{ secrets.RENDER_SERVICE_ID }}
          api_key: ${{ secrets.RENDER_API_KEY }}
          clear_cache: false

  deploy-to-dev:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1

      - name: Set up Helm
        uses: azure/setup-helm@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Deploy to dev environment
        run: |
          chmod +x ./helm/deploy.sh
          ./helm/deploy.sh dev site-monitor-dev
        env:
          DOCKER_USERNAME: ${{ env.DOCKER_USERNAME }}
          SECRET_KEY: ${{ secrets.DEV_SECRET_KEY }}

  deploy-to-staging:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1

      - name: Set up Helm
        uses: azure/setup-helm@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Deploy to staging environment
        run: |
          chmod +x ./helm/deploy.sh
          ./helm/deploy.sh staging site-monitor-staging
        env:
          DOCKER_USERNAME: ${{ env.DOCKER_USERNAME }}
          SECRET_KEY: ${{ secrets.STAGING_SECRET_KEY }}

  deploy-to-production:
    needs: [deploy-to-staging]
    runs-on: ubuntu-latest
    if: success() && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://site-monitor.example.com
    steps:
      - uses: actions/checkout@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1

      - name: Set up Helm
        uses: azure/setup-helm@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Deploy to production environment
        run: |
          chmod +x ./helm/deploy.sh
          ./helm/deploy.sh prod site-monitor-production
        env:
          DOCKER_USERNAME: ${{ env.DOCKER_USERNAME }}
          SECRET_KEY: ${{ secrets.PROD_SECRET_KEY }}

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          draft: false
          prerelease: false
